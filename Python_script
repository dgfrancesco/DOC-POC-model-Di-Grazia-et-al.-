"""
Model exported as python.
Name : POC & DOC model (Di Grazia et al.)
Group : Organic carbon
With QGIS : 32206
"""

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterVectorLayer
from qgis.core import QgsProcessingParameterNumber
from qgis.core import QgsProcessingParameterRasterLayer
from qgis.core import QgsVectorLayer
import processing


class PocDoc(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        # LULC layer with POC and DOC loads concentrations
        self.addParameter(QgsProcessingParameterVectorLayer('LULC', 'LULC layer with "OC" field with OC loads (mg/l)', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('Subbasins', 'Subbasins with field "DN" (''1'',''2'',''3'',''n'')', defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('Mainchannel', 'Main channel', types=[QgsProcessing.TypeVectorLine], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('Tributaries', 'Tributaries', defaultValue=None))
        self.addParameter(QgsProcessingParameterRasterLayer('Wateryield', 'Water yield (mm)', defaultValue=None))
        self.addParameter(QgsProcessingParameterNumber('Wateryieldpixelsize', 'Water yield pixel size (m)', type=QgsProcessingParameterNumber.Double, defaultValue=None))
        self.addParameter(QgsProcessingParameterNumber('Tributariesreductionfactor', 'Tributaries OC reduction factor', type=QgsProcessingParameterNumber.Double, minValue=0, defaultValue=0.5))
        self.addParameter(QgsProcessingParameterNumber('mainchannelreductionfactor', 'Main channel OC reduction factor', type=QgsProcessingParameterNumber.Double, minValue=0, maxValue=1, defaultValue=0.5))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(16, model_feedback)
        results = {}
        outputs = {}

        # Rasterize (vector to raster) - DOC
        alg_params = {
            'BURN': 0,
            'DATA_TYPE': 5,  # Float32
            'EXTENT': parameters['LULC'],
            'EXTRA': '',
            'FIELD': 'OC',
            'HEIGHT': parameters['Wateryieldpixelsize'],
            'INIT': None,
            'INPUT': parameters['LULC'],
            'INVERT': False,
            'NODATA': 0,
            'OPTIONS': '',
            'UNITS': 1,  # Georeferenced units
            'WIDTH': parameters['Wateryieldpixelsize'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['RasterizeVectorToRasterDoc'] = processing.run('gdal:rasterize', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Intersection - main channel
        alg_params = {
            'INPUT': parameters['Mainchannel'],
            'INPUT_FIELDS': [''],
            'OVERLAY': parameters['Subbasins'],
            'OVERLAY_FIELDS': [''],
            'OVERLAY_FIELDS_PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['IntersectionMainChannel'] = processing.run('native:intersection', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Intersection - Tributaries
        alg_params = {
            'INPUT': parameters['Tributaries'],
            'INPUT_FIELDS': [''],
            'OVERLAY': parameters['Subbasins'],
            'OVERLAY_FIELDS': [''],
            'OVERLAY_FIELDS_PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['IntersectionTributaries'] = processing.run('native:intersection', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # Create constant raster layer - pixelsize
        alg_params = {
            'EXTENT': parameters['LULC'],
            'NUMBER': parameters['Wateryieldpixelsize'],
            'OUTPUT_TYPE': 5,  # Float32
            'PIXEL_SIZE': parameters['Wateryieldpixelsize'],
            'TARGET_CRS': 'ProjectCrs',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CreateConstantRasterLayerPixelsize'] = processing.run('native:createconstantrasterlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # Dissolve - Main channel
        alg_params = {
            'FIELD': ['id'],
            'INPUT': outputs['IntersectionMainChannel']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['DissolveMainChannel'] = processing.run('native:dissolve', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # Dissolve - Tributaries
        alg_params = {
            'FIELD': ['id'],
            'INPUT': outputs['IntersectionTributaries']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['DissolveTributaries'] = processing.run('native:dissolve', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # Add geometry attributes
        alg_params = {
            'CALC_METHOD': 0,  # Layer CRS
            'INPUT': outputs['DissolveMainChannel']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['AddGeometryAttributes'] = processing.run('qgis:exportaddgeometrycolumns', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}

        # Field calculator - Tributaries
        alg_params = {
            'FIELD_LENGTH': 15,
            'FIELD_NAME': 'LengthTrib',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,  # Float
            'FORMULA': '($length)/1000',
            'INPUT': outputs['DissolveTributaries']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['FieldCalculatorTributaries'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}

        # Raster calculator - WYieldTot
        alg_params = {
            'BAND_A': 1,
            'BAND_B': 1,
            'BAND_C': None,
            'BAND_D': None,
            'BAND_E': None,
            'BAND_F': None,
            'EXTRA': '',
            'FORMULA': 'A*B*B',
            'INPUT_A': parameters['Wateryield'],
            'INPUT_B': outputs['CreateConstantRasterLayerPixelsize']['OUTPUT'],
            'INPUT_C': None,
            'INPUT_D': None,
            'INPUT_E': None,
            'INPUT_F': None,
            'NO_DATA': None,
            'OPTIONS': '',
            'RTYPE': 5,  # Float32
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['RasterCalculatorWyieldtot'] = processing.run('gdal:rastercalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(9)
        if feedback.isCanceled():
            return {}

        # Field calculator - Main channel
        alg_params = {
            'FIELD_LENGTH': 15,
            'FIELD_NAME': 'LengthMC',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,  # Float
            'FORMULA': '(length)/1000',
            'INPUT': outputs['AddGeometryAttributes']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['FieldCalculatorMainChannel'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(10)
        if feedback.isCanceled():
            return {}

        # Raster calculator - DOCTot
        alg_params = {
            'BAND_A': 1,
            'BAND_B': 1,
            'BAND_C': None,
            'BAND_D': None,
            'BAND_E': None,
            'BAND_F': None,
            'EXTRA': '',
            'FORMULA': 'A*B',
            'INPUT_A': outputs['RasterCalculatorWyieldtot']['OUTPUT'],
            'INPUT_B': outputs['RasterizeVectorToRasterDoc']['OUTPUT'],
            'INPUT_C': None,
            'INPUT_D': None,
            'INPUT_E': None,
            'INPUT_F': None,
            'NO_DATA': None,
            'OPTIONS': '',
            'RTYPE': 5,  # Float32
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['RasterCalculatorDoctot'] = processing.run('gdal:rastercalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(11)
        if feedback.isCanceled():
            return {}

        # Zonal statistics - WYT
        alg_params = {
            'COLUMN_PREFIX': 'WYT_',
            'INPUT': parameters['Subbasins'],
            'INPUT_RASTER': outputs['RasterCalculatorWyieldtot']['OUTPUT'],
            'RASTER_BAND': 1,
            'STATISTICS': [1],  # Sum
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ZonalStatisticsWyt'] = processing.run('native:zonalstatisticsfb', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(12)
        if feedback.isCanceled():
            return {}

        # Join attributes by field value - LengthTrib
        alg_params = {
            'DISCARD_NONMATCHING': True,
            'FIELD': 'id',
            'FIELDS_TO_COPY': ['LengthTrib'],
            'FIELD_2': 'id',
            'INPUT': outputs['FieldCalculatorMainChannel']['OUTPUT'],
            'INPUT_2': outputs['FieldCalculatorTributaries']['OUTPUT'],
            'METHOD': 1,  # Take attributes of the first matching feature only (one-to-one)
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['JoinAttributesByFieldValueLengthtrib'] = processing.run('native:joinattributestable', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(13)
        if feedback.isCanceled():
            return {}

        # Zonal statistics - DOCT
        alg_params = {
            'COLUMN_PREFIX': 'DOCT_',
            'INPUT': outputs['ZonalStatisticsWyt']['OUTPUT'],
            'INPUT_RASTER': outputs['RasterCalculatorDoctot']['OUTPUT'],
            'RASTER_BAND': 1,
            'STATISTICS': [1],  # Sum
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ZonalStatisticsDoct'] = processing.run('native:zonalstatisticsfb', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(14)
        if feedback.isCanceled():
            return {}

        # Join attributes by field value - Lenghts
        alg_params = {
            'DISCARD_NONMATCHING': True,
            'FIELD': 'id',
            'FIELDS_TO_COPY': ['LengthMC','LengthTrib'],
            'FIELD_2': 'id',
            'INPUT': outputs['ZonalStatisticsDoct']['OUTPUT'],
            'INPUT_2': outputs['JoinAttributesByFieldValueLengthtrib']['OUTPUT'],
            'METHOD': 1,  # Take attributes of the first matching feature only (one-to-one)
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['JoinAttributesByFieldValueLenghts'] = processing.run('native:joinattributestable', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(15)
        if feedback.isCanceled():
            return {}

        # Export to spreadsheet -dbOC
        alg_params = {
            'FORMATTED_VALUES': False,
            'LAYERS': outputs['JoinAttributesByFieldValueLenghts']['OUTPUT'],
            'OVERWRITE': False,
            'USE_ALIAS': False,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExportToSpreadsheetDboc'] = processing.run('native:exporttospreadsheet', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        
        outputs['ExportToSpreadsheetDboc']['OUTPUT']
        uri = outputs['ExportToSpreadsheetDboc']['OUTPUT']
        CO = QgsVectorLayer(uri, 'OUTPUT', 'ogr')
        
        #Resultat anterior (Red_DOC_con anterior)
        prev_res = 0
        #TWater_sum_sub
        acumulat_TW = 0
        
        CO_nou = []
        i = 0
        for x in CO.getFeatures():
            for feat in CO.getFeatures():
                DN = feat['DN']
                if DN-1 == i:
                    CO_nou.append(feat)
            i += 1
        
        CO = CO_nou
        
        
        print("DN, OC")
        for feat in CO:
            aux1 = feat['DOCT_sum']/feat['WYT_sum']
            aux2 = (100-(feat['LengthTrib']*parameters['Tributariesreductionfactor']))/100
            Act_con_TRIB = aux1*aux2
            if Act_con_TRIB < 0:
                Act_con_TRIB = 0
            
            ConOC = 0
            if feat['DN'] == 1:
                ConOC = (Act_con_TRIB *(100 - (feat['LengthMC']*parameters['mainchannelreductionfactor'])))/100
            else:
                ConOC = (((Act_con_TRIB * feat['WYT_sum']) + (prev_res*acumulat_TW))/(acumulat_TW+feat['WYT_sum']))* ((100 - (feat['LengthMC']*parameters['mainchannelreductionfactor']))/100)
            
            prev_res = ConOC
            acumulat_TW += feat['WYT_sum']
            
            
            print(str(feat['DN']) + ", " + str(ConOC))
            
            #print(feat['DN'])
            #print(": ")
            #print(ConOC)
        return results

    def name(self):
        return 'POC & DOC'

    def displayName(self):
        return 'POC & DOC model (Di Grazia et al.)'

    def group(self):
        return 'Carbon'

    def groupId(self):
        return 'Carbon'

    def createInstance(self):
        return PocDoc()
